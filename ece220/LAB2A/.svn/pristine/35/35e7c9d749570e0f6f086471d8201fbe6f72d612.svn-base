.ORIG x3000
; Write code to read in characters and echo them
; till a newline character is entered.



                AND R0, R0, #0
LOOP_TOP        LD R1, NEW_LINE_NEG
                IN
                ADD R1, R1, R0
                BRz LOOP_OUT
                JSR IS_BALANCED
                BRnzp LOOP_TOP


LOOP_OUT        LD R3, STACK_START
                LD R4, STACK_TOP
                NOT R4, R4
                ADD R4, R4, #1
                ADD R3, R3, R4
                BRz DONE
		AND R5, R5, #0
                ADD R5, R5, #-1
DONE            HALT




SPACE           .FILL x0020
NEW_LINE_NEG    .FILL xFFF3
NEW_LINE        .FILL x000A
CHAR_RETURN     .FILL x000D

; if ( push onto stack if ) pop from stack and check if popped value is (
; input - R0 holds the input
; output - R5 set to -1 if unbalanced. else 1.

IS_BALANCED
                ST R1, IS_BALANCED_SaveR1
                ST R7, IS_BALANCED_SaveR7
                LD R1, NEG_OPEN
                ADD R1, R1, R0
                BRz STACK_PUSH
	        LD R1, NEG_CLOSE
                ADD R1, R1, R0
                BRz STACK_POP

DONE_BALANCED
                LD R1, IS_BALANCED_SaveR1
                LD R7, IS_BALANCED_SaveR7
                RET

STACK_PUSH
                JSR PUSH
                BRnzp DONE_BALANCED

STACK_POP
                JSR POP
                LD R1, NEG_OPEN
                AND R5, R5, #0
                ADD R1, R1, R0
                BRz BALANCED
                ADD R5, R5, #-1
                BRnzp OUT_STACK_POP
BALANCED        ADD R5, R5, #1
OUT_STACK_POP   BRnzp DONE_BALANCED

NEG_OPEN                .FILL xFFD8
NEG_CLOSE               .FILL xFFD7
IS_BALANCED_SaveR1      .FILL x0000
IS_BALANCED_SaveR7      .FILL x0000

;IN:R0, OUT:R5 (0-success, 1-fail/overflow)
;R3: STACK_END R4: STACK_TOP
;
PUSH
        ST R3, PUSH_SaveR3      ;save R3
        ST R4, PUSH_SaveR4      ;save R4
        AND R5, R5, #0          ;
        LD R3, STACK_END        ;
        LD R4, STACK_TOP        ;
        ADD R3, R3, #-1         ;
        NOT R3, R3              ;
        ADD R3, R3, #1          ;
        ADD R3, R3, R4          ;
        BRz OVERFLOW            ;stack is full
        STR R0, R4, #0          ;no overflow, store value in the stack
        ADD R4, R4, #-1         ;move top of the stack
        ST R4, STACK_TOP        ;store top of stack pointer
        BRnzp DONE_PUSH         ;
OVERFLOW
        ADD R5, R5, #1          ;
DONE_PUSH
        LD R3, PUSH_SaveR3      ;
        LD R4, PUSH_SaveR4      ;
        RET


PUSH_SaveR3     .BLKW #1        ;
PUSH_SaveR4     .BLKW #1        ;


;OUT: R0, OUT R5 (0-success, 1-fail/underflow)
;R3 STACK_START R4 STACK_TOP
;
POP
        ST R3, POP_SaveR3       ;save R3
        ST R4, POP_SaveR4       ;save R3
        AND R5, R5, #0          ;clear R5
        LD R3, STACK_START      ;
        LD R4, STACK_TOP        ;
        NOT R3, R3              ;
        ADD R3, R3, #1          ;
        ADD R3, R3, R4          ;
        BRz UNDERFLOW           ;
        ADD R4, R4, #1          ;
        LDR R0, R4, #0          ;
        ST R4, STACK_TOP        ;
        BRnzp DONE_POP          ;
UNDERFLOW
        ADD R5, R5, #1          ;
DONE_POP
        LD R3, POP_SaveR3       ;
        LD R4, POP_SaveR4       ;
        RET


POP_SaveR3      .BLKW #1        ;
POP_SaveR4      .BLKW #1        ;
STACK_END       .FILL x3FF0     ;
STACK_START     .FILL x4000     ;
STACK_TOP       .FILL x4000     ;

.END
